Imports: {
import static gate.Utils.*;
}
Phase: degreeFinder 
Input: Lookup Token Date SectionFinder
Options: control = appelt debug = false

	MACRO: TOKEN_FILLER
(({Token})[0,12])

	MACRO: DATE_RULE
	({Date.rule==DateName} | {Date.rule==DateNumSlashDot} | {Date.rule==DateNumSlashDot} | {Date.rule==DateSlash} | {Date.rule==DateNameSpan1} | {Date.rule==DateNameSpan2} | {Date.rule==DateNumDash} 
	 {Date.rule==DateNameRev} | {Date.rule==DateNumDashRev} | {Date.rule==TempYear2} | {Date.rule==YearSpan3} | {Date.rule==YearSpan2} |{Date.rule==GazDate})

MACRO:DEGREE_RULE
(
(({Lookup.minorType==degree})(TOKEN_FILLER({Lookup.minorType==university_us})))|
(({Lookup.minorType==degree})(TOKEN_FILLER)(DATE_RULE)(TOKEN_FILLER({Lookup.minorType==university_us})))|
 (({Lookup.minorType==degree})(TOKEN_FILLER({Lookup.minorType==university_us}))?TOKEN_FILLER(DATE_RULE)((({Token.kind==punctuation})|({Token.category==CC}))(DATE_RULE))?)|
 ({Lookup.minorType==degree}TOKEN_FILLER(DATE_RULE)(((({Token.kind==punctuation})|({Token.category==CC})))(DATE_RULE))?(TOKEN_FILLER{Lookup.minorType==university_us})?)|
 (({Lookup.minorType==university_us})(TOKEN_FILLER{Lookup.majorType==jobtitle})?TOKEN_FILLER(DATE_RULE)((({Token.kind==punctuation})|({Token.category==CC}))(DATE_RULE))?) |
 ({Lookup.minorType==university_us}TOKEN_FILLER(DATE_RULE)((({Token.kind==punctuation})|({Token.category==CC}))(DATE_RULE))?(TOKEN_FILLER{Lookup.minorType==degree})?)|
 ({Lookup.minorType==university_us}TOKEN_FILLER(DATE_RULE)((({Token.kind==punctuation})|({Token.category==CC}))(DATE_RULE))?(TOKEN_FILLER{Lookup.minorType==degree})?)|
 /*((DATE_RULE)((({Token.kind==punctuation})|({Token.category==CC}))(DATE_RULE))?(TOKEN_FILLER{Lookup.minorType==university_us})?(TOKEN_FILLER{Lookup.minorType==degree})?)|
   ((DATE_RULE)((({Token.kind==punctuation})|({Token.category==CC}))(DATE_RULE))?(TOKEN_FILLER{Lookup.minorType==degree})?(TOKEN_FILLER{Lookup.minorType==university_us})?)*/
 ((DATE_RULE)((({Token.kind==punctuation})|({Token.category==CC}))(DATE_RULE))?(TOKEN_FILLER{Lookup.minorType==university_us})(TOKEN_FILLER{Lookup.minorType==degree})?)|
 ((DATE_RULE)((({Token.kind==punctuation})|({Token.category==CC}))(DATE_RULE))?(TOKEN_FILLER{Lookup.minorType==university_us})?(TOKEN_FILLER{Lookup.majorType==degree}))|
 ((DATE_RULE)((({Token.kind==punctuation})|({Token.category==CC}))(DATE_RULE))?(TOKEN_FILLER{Lookup.minorType==degree})(TOKEN_FILLER{Lookup.minorType==university_us})?)|
 ((DATE_RULE)((({Token.kind==punctuation})|({Token.category==CC}))(DATE_RULE))?(TOKEN_FILLER{Lookup.minorType==degree})?(TOKEN_FILLER{Lookup.minorType==degree}))
 )

	Rule: DegreeRule
	(
	 (DEGREE_RULE)
	):degree
	  -->
	  //:degree.DegreeRule={}
{
	AnnotationSet workexSet = bindings.get("degree");
	FeatureMap features = Factory.newFeatureMap();
	boolean dateDone = false;
	for(Annotation ann : workexSet.inDocumentOrder()){
		if(ann.getType() == "Lookup"){
			features.put(ann.getFeatures().get("minorType"),stringFor(doc,ann));//org or jobtitle
		}else if(ann.getType() == "Date"){
			String datePeriod = "";
			if(!dateDone){
				dateDone = true;
				datePeriod = "date_start";
			}
			else{
				datePeriod = "date_end";
			}
			features.put(datePeriod,stringFor(doc,ann));//org or jobtitle
		}
	}
	outputAS.add(workexSet.firstNode(),workexSet.lastNode(),"DegreeFinder",features);
}